************** special handles ****************

- supported extensions: list of id-string pairs

- supported attributes: list of id-string pairs
	first a generic set
	then platform set
	then whatever extensions add

- preferred attributes for directory listing
	list of ids
	writable
	default: generic set + platform preferred set

************** list of core commands ***************

CMD_PING
- instant OK reply - for sanity-checking, keepalive etc.

CMD_HELLO
- welcome packet - must be sent before everything except PING
- parameters from client:
	* proto version
	* requested host (for vhosting)
- reply from server:
	* proto version
	* maximum file handles
	* maximum open directories
	* platform string
	* hash of available extensions (so that client can cache it)

CMD_ASSIGN
- assign a path to handle
- does not touch disk
- sanity-checks and validates path according to OS/FS rules

CMD_STAT
- parameter is array of attr indices
- returns attrs specified in parameter

CMD_STATVFS
- same as stat except for VFS properties such as free space
- returns attrs specified in parameter

#### operations on file ####

CMD_SEEK_READ
- seek, then read

CMD_READ
- read data
- read requested length always, except:
	* when at end
	* on error
- EOF is indicated by zero-length OK reply, can be implied on short OK reply

CMD_SEEK_WRITE
- seek then write
- extend file transparently, create sparse if possible
	* no change to file if write len is 0

CMD_WRITE
- write data
- write fully, except on error
- create if not exists

CMD_APPEND
- seek to end, then write

CMD_TRUNCATE
- set file size
- can extend or shrink
- create if not exists (it's "touch")

##### operations on directory #####

CMD_DELETE
- remove file normally
- remove empty directory normally
- never follow symlinks

CMD_RENAME
- rename file/dir normally
	* overwrite file->file, fail if *->dir
- create path if possible (implicit mkdir -p)
- also never follow symlinks
	* (XXX) change symlink path if relative?

CMD_MAKEDIR
- recursive (as mkdir -p)
- does not overwrite files

CMD_READDIR_START
- open handle then readdir

CMD_READDIR
- read bunch of entries in directory, up to max size
- read at least one if max size is too small
- read zero if at end
- format: list of {
	uint16 entrylen
	string name (without path, client must append)
	items as specified by special handle
	}
- readdir handles can expire, there is a limited number of them
	-> error if not started by _START, to discover the expired ones

CMD_SETATTR
- set specified attribute to specified value
- attributes are from platform supported set and/or extensions
- parameter: array of indices, array of values
	* returns


************* error codes ************

E_BADCMD - unknown command
E_BADVERSION - protocol version is not supported
E_BADHANDLE - handle is outside acceptable range
E_BADPATH - path is unacceptable for underlying OS/FS

E_DENIED - access rights violation
E_BUSY - resource is occupied, try again later
E_IO - I/O error on server

E_NOTFOUND
	- resource under current handle does not exist
	- path component is not a directory (when creating files)
E_NOTDIR - directory operation attempted on non-directory
E_NOTFILE - file operation attempted on directory

E_BADSEEK
	- seek on a position that is invalid in underlying os/fs
	- resource is unseekable
E_TOOBIG
	- file or filesystem size limit reached
E_DEVFULL
	- filesystem is full

E_NOTEMPTY - attempting to delete a non-empty directory
E_BADMOVE
	- directory move would result in a path loop
	- overwriting file with a directory
	- component of new path is file
E_XDEV - move crossing filesystem boundary
E_READDIR - CMD_READDIR without CMD_READDIR_START

E_SERVFAIL - sudden death


************* platforms **************

*** "generic":
- attributes:
	* type (file/directory/special)
	* permissions (read/write)
	* size (file size, zero for directory)
	* last modification time
- vfs attributes:
	* total disk size
	* free space

*** "posix":
- attributes: whatever stat() gives
- vfs attrs: whatever statvfs() gives

*** "windows":
TODO	


************* extensions *************

- auth-required, auth-optional
	* use SASL for authentication
	  (but not security layers, we have TLS for that)
	* extension "auth-methods LIST OF MECHS"
	  (to feed into Cyrus SASL easily)
	* EXTERNAL mechanism uses TLS's client cert
	* new command CMD_AUTH mirrors SASL's conversation
	* support for PLAIN mechanism must be built-in

- async-ops
	equivalents of all, plus:
	- recursive delete
	- cross-fs move
	- copy
	CMD_(operation) returns handle
	CMD_OPSTATUS checks progress /TODO how exactly?/
	CMD_ABORT

